package com.study.notes.java.reflect;
/**                            JAVA  反射机制
 * 反射机制就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，
 * 都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。
 * 用一句话总结就是反射可以实现在运行时可以知道任意一个类的属性和方法。
 * 反射机制主要提供了以下功能：
    在运行时判断任意一个对象所属的类；
    在运行时构造任意一个类的对象；
    在运行时判断任意一个类所具有的成员变量和方法；
    在 运行时调用任意一个对象的方法；
    生成动态代理(ps:这个知识点也很重要，后续会为大家讲到)
 *Java 反射机制的应用场景
    逆向代码 ，例如反编译
    与注解相结合的框架 例如Retrofit
    单纯的反射机制应用框架 例如EventBus
    动态生成类框架 例如Gson
 *
 *  反射机制的优点与缺点
    为什么要用反射机制？直接创建对象不就可以了吗，这就涉及到了动态与静态的概念
    静态编译：在编译时确定类型，绑定对象,即通过。
    动态编译：运行时确定类型，绑定对象。动态编译最大限度发挥了java的灵活性，体现了多态的应用，有以降低类之间的藕合性。

    优点:
    可以实现动态创建对象和编译，体现出很大的灵活性，特别是在J2EE的开发中它的灵活性就表现的十分明显。比如，一个大型的软件，
    不可能一次就把把它设计的很完美，当这个程序编译后，发布了，当发现需要更新某些功能时，我们不可能要用户把以前的卸载，
    再重新安装新的版本，假如这样的话，这个软件肯定是没有多少人用的。采用静态的话，需
    要把整个程序重新编译一次才可以实现功能的更新，而采用反射机制的话，它就可以不用卸载，只需要在运行时才动态的创建和编译，
    就可以实现该功能。

    缺点:
    对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。
    这类操作总是慢于只直接执行相同的操作。
 * */